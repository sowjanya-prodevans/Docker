In this article I will show how to set up a private Docker registry with Sonatype’s Nexus Repository Manager 3.0 OSS.
Docker Registry is an application that manages storing and delivering Docker container images. Registries centralize container images and reduce build times for developers. Docker images guarantee the same runtime environment through virtualization, but building an image can involve a significant time investment.
Docker also has a free public registry, Docker Hub, that can host your custom Docker images, but there are situations where you will not want your image to be publicly available. Images typically contain all the code necessary to run an application, so using a private registry is preferable when using proprietary software.
	Distribution of Docker images.
This may be either small-scale between multiple computers or inside an organization.

	Restrict distribution of Docker images.
While I prefer to make my Docker images available at DockerHub, there are cases when I feel that the Docker images are not ready for distribution to a larger audience.
In an organization, it may undesirable or unsuitable to deploy Docker images to a public registry.

Prerequisites:
•	Two Ubuntu Machines names node1 [Server] and node2 [client] 
•	Should install Docker on two nodes (server, Client)
•	Install Docker-compose on node1 [server]

Understanding the setup:
•	The IP Address for Node 1 is 192.168.1.45 – Docker Registery
•	The IP address for Node2 is 192.168.1.25 - client
•	Node 1will host the docker registry and Node 2 is the machine where images are getting created and then pushed to the docker registry or pulled from the docker registry.
Docker: 
                      Docker is a computer program that performs operating-system-level virtualization, also known as “containerization”. Docker is a popular tool to make it easier to build, deploy and run applications using containers. Containers allow us to package all the things that our application needs like such as libraries and other dependencies and ship it all as a single package. 
Install and Use Docker on Ubuntu 16.04
                                           Docker installation package available in the official Ubuntu 16.04 repository may not be the latest version. To get this latest version, install Docker from the official Docker repository.
	First, downloads are valid, add the GPG key for the official Docker repository to your system
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add –

	Add the Docker repository to APT sources:
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
 
	Update the package database with the Docker packages from the newly added repo:
$ sudo apt-get update

	Finally, install Docker:
$ sudo apt-get install -y docker-ce

	Docker should now be installed, the daemon started, and the process enabled to start on boot. Check that it’s running:
$ sudo systemctl status docker
 

	To view system-wide information about Docker, use:
$ docker info
Docker Compose:
Compose is a tool for defining and running multi-container Docker applications. With Compose, use a YAML file to configure your application’s services. Then, with a single command to create and start all the services from your configuration.
Using Compose is basically a three-step process:
•	Define your app’s environment with a Dockerfile so it can be reproduced anywhere.
•	Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.
•	Run docker-compose up and Compose starts and runs your entire app.
Prerequisites:
•	Need an Ubuntu 16.04 server 
•	A non-root user with sudo privileges
•	Docker installed 
Installing Docker Compose:
	Check the current release and if necessary, update it in the command below:
$ sudo curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
	Next  set the permissions
$ sudo chmod +x /usr/local/bin/docker-compose
	Then we have to verify that the installation was successful by checking the version:
$ docker-compose –version
Creating docker-compose file on Node 1:
 

Updating the host file of Node 1 with the IP Address of Node 2
 

Docker Registry Preparation:
Will create a directory in the host to hold Nexus 3 data and logs, as described in the Nexus 3 image.Make a directory using the mkdir commend
$ sudo mkdir -p /some/dir/nexus3/data
Assign Permission to nexus3 directory
$ sudo chown -R 200 /some/dir/nexus3/data
Create a Docker Compose Configuration
In order to simplify start of the Nexus 3 Docker container, will use Docker Compose.
	Go to the “nexus3” directory.
This is the parent directory of the “data” directory that we created as part of the preparations above.
	Create a file named “docker-compose.yml” with the following content:


Note that:
	Two ports are exposed.
On port 8081 the web GUI of Nexus 3 will be available. The Docker registry API will be exposed on port 8123. The latter port may be changed as desired, just remember to configure Nexus 3 accordingly.
	The shared directory “nexus-data”, which is mapped to the host directory “data”.
This directory will contain the persistent data of Nexus 3

 

Launch Nexus :
In a terminal window, the Docker Quick start terminal if you are using Docker Toolbox, with the current directory being the directory with the docker-compose.yml file created earlier, launch the Nexus 3 Repository manager using this command:
$ sudo docker-compose up –d

Then use the logs command to view the logs from the Nexus Docker container:
$ sudo docker-compose logs
 
After some time, log output similar to this should appear in the Nexus log, indicating that Nexus has successfully started up:
Create a Docker Registry in Nexus 3
With Nexus 3 up and running, we should now be able to create a Docker registry.
	Find the IP address of the Docker host.
We are running Docker on Linux it will be the same IP address as the host, which can be found using the “ifconfig” command.

	Open the URL [Docker host IP address]:8081 in a web browser

	Sign in to Nexus 3

Note: Click the Sign In button in the upper right corner and use the username “admin” and the password “admin123”

 

	Click the cogwheel to go to the server administration and configuration section
 
	Click Repositories
 
	Click the Create repository button
 
	Configure the Docker repository.

1.	Give the repository a name – cda-dockerrepo
2.	Make sure that the Online checkbox is checked.
3.	Check the HTTP checkbox under Repository Connectors and enter the port number 8123.
4.	4Check the Enable Docker V1 API checkbox
5.	Select default under Blob store.
6.	
	Click the button Create repository.

 


Note: The private Docker registry is now ready to be used.

Log in to the Private Docker Registry from the Client

	Configuring Node 2 docker for interacting with insecure docker registry
Stop the docker service
$ sudo systemctl stop docker
Update the docker daemon.json file with following values
{  
"insecure-registries":["192.168.1.45:8123"] 
}
 
Start the docker service
$ sudo systemctl start docker
Log in to the Private Docker Registry:

We should now be able to log in to the Nexus 3 registry using the following command  using the username admin and the password admin123
$ sudo docker login -u admin -p admin123 192.168.1.45:8123
The result should be a message saying that login succeeded.
 
Pushing a Docker Image to the Private Registry

	Tag the image.

$ sudo docker tag debian:latest 192.168.1.45:8081/admin/test_debian:v2

This tells Docker the new name that will be used for the Docker image and the IP address of the registry to which we later will push the image.

	List the docker Images:

$ sudo docker images

	Push the image to our private registry.

$ sudo docker push 192.168.1.45:8081/admin/test_debian:v2

	Open the URL http://192.168.1.45:8081 in a browser.

	Click the Components category in the Browse column on the left.

	Click the Docker registry with the name “cda-dockerrepo” in the list of components that appear.

 

In the list of components in cda-dockerrepo, there should be one single entry with the name 

 
 


	To pull the image, perhaps on another computer, use the following commands:

$ docker login -u admin -p admin123 192.168.1.45:8123
$ sudo docker pull 192.168.1.45:8081/admin/test_debian:v2










